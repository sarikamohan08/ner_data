import spacy
from spacy.tokens import DocBin
from spacy.training import Example
import random

# Define training data (replace with your actual annotated data)
train_data = [
    ("John Doe, Member ID: 12345, SSN: 987-65-4321, Effective Date: 2022-01-01",
     {"entities": [(0, 8, "PATIENT_NAME"), (20, 25, "MEMBER_ID"), (30, 41, "SSN"), (57, 67, "EFFECTIVE_DATE")]}),
    ("Jane Smith, Member ID: 54321, SSN: 123-45-6789, Effective Date: 2023-02-15",
     {"entities": [(0, 10, "PATIENT_NAME"), (22, 27, "MEMBER_ID"), (32, 43, "SSN"), (59, 69, "EFFECTIVE_DATE")]}),
    # Add more examples as needed
]

# Load a blank English NLP model
nlp = spacy.blank("en")

# Create a new entity recognizer
ner = nlp.add_pipe("ner")

# Add labels to the entity recognizer
labels = ["PATIENT_NAME", "MEMBER_ID", "SSN", "EFFECTIVE_DATE"]
for label in labels:
    ner.add_label(label)

# Convert training data to spaCy's format
db = DocBin()
for text, annotations in train_data:
    doc = nlp.make_doc(text)
    ents = []
    for start, end, label in annotations["entities"]:
        span = doc.char_span(start, end, label=label)
        if span:
            ents.append(span)
    doc.ents = ents
    db.add(doc)

# Save training data to disk
db.to_disk("training_data.spacy")

# Initialize the model
optimizer = nlp.initialize()

# Train the model
n_iter = 30
for i in range(n_iter):
    random.shuffle(train_data)
    losses = {}
    for text, annotations in train_data:
        example = Example.from_dict(nlp.make_doc(text), annotations)
        nlp.update([example], drop=0.5, losses=losses)
    print(f"Losses at iteration {i}: {losses}")

# Save the trained model
nlp.to_disk("custom_ner_model")

# Load the trained model
nlp = spacy.load("custom_ner_model")

# Test the model
test_text = "Michael Johnson, Member ID: 98765, SSN: 111-22-3333, Effective Date: 2024-07-31"
doc = nlp(test_text)
for ent in doc.ents:
    print(ent.text, ent.label_)

# Function to check for the presence of Effective Date
def has_effective_date(text):
    doc = nlp(text)
    for ent in doc.ents:
        if ent.label_ == "EFFECTIVE_DATE":
            return True
    return False

# Check if a text contains an effective date
print("Has Effective Date:", has_effective_date(test_text))



train_data = [
    ("John Doe, Member ID: 12345, SSN: 987-65-4321, Effective Date: 2022-01-01",
     {"entities": [(0, 8, "PATIENT_NAME"), (20, 25, "MEMBER_ID"), (30, 41, "SSN"), (57, 67, "EFFECTIVE_DATE")]}),
    ("Jane Smith, Member ID: 54321, SSN: 123-45-6789, Effective Date: 15th February 2023",
     {"entities": [(0, 10, "PATIENT_NAME"), (22, 27, "MEMBER_ID"), (32, 43, "SSN"), (59, 75, "EFFECTIVE_DATE")]}),
    ("Robert Johnson, Member ID: 67890, SSN: 222-33-4444, Effective Date: 05/20/2021",
     {"entities": [(0, 15, "PATIENT_NAME"), (27, 32, "MEMBER_ID"), (37, 48, "SSN"), (64, 74, "EFFECTIVE_DATE")]}),
    ("Emily Davis, SSN: 333-44-5555, Member ID: 101112, Effective Date: October 10, 2020",
     {"entities": [(0, 11, "PATIENT_NAME"), (17, 28, "SSN"), (41, 47, "MEMBER_ID"), (63, 79, "EFFECTIVE_DATE")]}),
    ("Michael Brown, SSN: 444-55-6666, Member ID: 131415, Effective Date: 2019-Aug-01",
     {"entities": [(0, 13, "PATIENT_NAME"), (19, 30, "SSN"), (43, 49, "MEMBER_ID"), (65, 77, "EFFECTIVE_DATE")]}),
    ("Sarah Lee, Member ID: 161718, SSN: 555-66-7777, Effective Date: 31st December 2021",
     {"entities": [(0, 9, "PATIENT_NAME"), (21, 27, "MEMBER_ID"), (32, 43, "SSN"), (59, 76, "EFFECTIVE_DATE")]}),
    ("David Wilson, SSN: 666-77-8888, Member ID: 192021, Effective Date: 03.14.2022",
     {"entities": [(0, 12, "PATIENT_NAME"), (18, 29, "SSN"), (42, 48, "MEMBER_ID"), (64, 74, "EFFECTIVE_DATE")]}),
    ("Jennifer Martinez, Member ID: 222324, Effective Date: 2022/11/11, SSN: 777-88-9999",
     {"entities": [(0, 18, "PATIENT_NAME"), (30, 36, "MEMBER_ID"), (53, 63, "EFFECTIVE_DATE"), (69, 80, "SSN")]}),
    ("Kevin White, Effective Date: 19th July 2018, SSN: 888-99-0000, Member ID: 252627",
     {"entities": [(0, 11, "PATIENT_NAME"), (28, 44, "EFFECTIVE_DATE"), (51, 62, "SSN"), (76, 82, "MEMBER_ID")]}),
    ("Nancy Thompson, SSN: 999-00-1111, Effective Date: 2023/04/25, Member ID: 282930",
     {"entities": [(0, 15, "PATIENT_NAME"), (21, 32, "SSN"), (50, 60, "EFFECTIVE_DATE"), (74, 80, "MEMBER_ID")]}),
    ("Luis Garcia, SSN: 101-11-1213, Member ID: 313233, Effective Date: 1 Jan 2017",
     {"entities": [(0, 11, "PATIENT_NAME"), (17, 28, "SSN"), (41, 47, "MEMBER_ID"), (63, 73, "EFFECTIVE_DATE")]}),
    ("Elizabeth Rodriguez, Effective Date: 31/12/2016, Member ID: 343536, SSN: 212-22-2324",
     {"entities": [(0, 20, "PATIENT_NAME"), (37, 47, "EFFECTIVE_DATE"), (60, 66, "MEMBER_ID"), (72, 83, "SSN")]}),
    ("James Williams, Member ID: 373839, SSN: 232-23-2425, Effective Date: September 10, 2015",
     {"entities": [(0, 13, "PATIENT_NAME"), (25, 31, "MEMBER_ID"), (36, 47, "SSN"), (63, 80, "EFFECTIVE_DATE")]}),
    ("Ashley Hernandez, SSN: 242-24-2526, Effective Date: 15-05-2024, Member ID: 404142",
     {"entities": [(0, 16, "PATIENT_NAME"), (22, 33, "SSN"), (51, 61, "EFFECTIVE_DATE"), (75, 81, "MEMBER_ID")]}),
    ("Christopher Jackson, Member ID: 434445, Effective Date: 2022/06/20, SSN: 252-25-2627",
     {"entities": [(0, 19, "PATIENT_NAME"), (31, 37, "MEMBER_ID"), (54, 64, "EFFECTIVE_DATE"), (70, 81, "SSN")]}),
    ("Jessica Wilson, SSN: 262-26-2728, Member ID: 464748, Effective Date: 09.08.2023",
     {"entities": [(0, 14, "PATIENT_NAME"), (20, 31, "SSN"), (44, 50, "MEMBER_ID"), (66, 76, "EFFECTIVE_DATE")]}),
    ("Joshua Moore, Member ID: 495051, SSN: 272-27-2829, Effective Date: 2017-March-05",
     {"entities": [(0, 12, "PATIENT_NAME"), (24, 30, "MEMBER_ID"), (35, 46, "SSN"), (62, 76, "EFFECTIVE_DATE")]}),
    ("Karen Lee, SSN: 282-28-2930, Effective Date: 2021/01/15, Member ID: 525354",
     {"entities": [(0, 9, "PATIENT_NAME"), (15, 26, "SSN"), (44, 54, "EFFECTIVE_DATE"), (68, 74, "MEMBER_ID")]}),
    ("Daniel Kim, Effective Date: 25-11-2024, Member ID: 555657, SSN: 292-29-3031",
     {"entities": [(0, 10, "PATIENT_NAME"), (27, 37, "EFFECTIVE_DATE"), (50, 56, "MEMBER_ID"), (62, 73, "SSN")]}),
    ("Megan Clark, SSN: 303-30-3132, Member ID: 585960, Effective Date: 2nd February 2022",
     {"entities": [(0, 11, "PATIENT_NAME"), (17, 28, "SSN"), (41, 47, "MEMBER_ID"), (63, 81, "EFFECTIVE_DATE")]})
]
