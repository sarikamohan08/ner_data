import os
import pandas as pd
import pytesseract
from PIL import Image
import chardet

class FolderProcessor:
    def __init__(self, excel_path, root_folder_path, output_folder_path):
        """
        Initialize the FolderProcessor with paths.
        """
        self.excel_path = excel_path
        self.root_folder_path = root_folder_path
        self.output_folder_path = output_folder_path
        self.subfolders = self.load_subfolders()

    def load_subfolders(self):
        """
        Load the list of subfolders from the Excel file.
        """
        df = pd.read_excel(self.excel_path)
        return df.iloc[:, 0].astype(str).tolist()  # Ensure subfolder names are cast to strings

    def detect_encoding(self, file_path):
        """
        Detect the encoding of a given text file.
        """
        with open(file_path, 'rb') as file:
            rawdata = file.read()
            result = chardet.detect(rawdata)
            return result['encoding']

    def read_text_file(self, file_path):
        """
        Read content from a text file with detected encoding.
        """
        encoding = self.detect_encoding(file_path)
        print(f"Detected encoding for {file_path}: {encoding}")
        try:
            with open(file_path, 'r', encoding=encoding) as file:
                return file.read()
        except UnicodeDecodeError as e:
            print(f"Error reading file {file_path}: {e}")
            return ""

    def read_image_file(self, file_path):
        """
        Extract text from an image file using PyTesseract.
        """
        try:
            # Open the image file
            img = Image.open(file_path)
            # Use PyTesseract to extract text
            text = pytesseract.image_to_string(img)
            return text
        except Exception as e:
            print(f"Error reading image file {file_path}: {e}")
            return ""

    def read_subfolder_files(self, subfolder_path):
        """
        Read all files in the given subfolder and return their combined content.
        """
        subfolder_text_content = ""

        # Loop through each file in the subfolder
        for file_name in os.listdir(subfolder_path):
            file_path = os.path.join(subfolder_path, str(file_name))  # Ensure file names are strings

            # Ensure it's a file and not a directory
            if os.path.isfile(file_path):
                if file_name.lower().endswith(('.png', '.jpg', '.jpeg', '.tiff', '.bmp', '.gif')):
                    # If the file is an image, read it using PyTesseract
                    print(f"Processing image file: {file_name}")
                    subfolder_text_content += self.read_image_file(file_path) + "\n"
                elif file_name.lower().endswith(('.txt', '.csv', '.log')):
                    # If the file is a text file, read it
                    print(f"Processing text file: {file_name}")
                    subfolder_text_content += self.read_text_file(file_path) + "\n"

        return subfolder_text_content

    def save_subfolder_content(self, tax_id, content):
        """
        Save the content to the output folder in a folder named after the TaxID.
        """
        # Create a directory for the TaxID if it doesn't exist
        tax_id_folder_path = os.path.join(self.output_folder_path, str(tax_id))
        if not os.path.exists(tax_id_folder_path):
            os.makedirs(tax_id_folder_path)

        # Save the content to a file within the TaxID folder
        output_file_path = os.path.join(tax_id_folder_path, f"{str(tax_id)}_content.txt")  # Name the file with the TaxID
        
        with open(output_file_path, 'w', encoding='utf-8') as output_file:
            output_file.write(content)
        
        print(f"Saved content for TaxID: {tax_id} in folder: {tax_id_folder_path}")

    def process_folders(self):
        """
        Process each subfolder: read its contents and save them.
        """
        for tax_id in self.subfolders:
            subfolder_path = os.path.join(self.root_folder_path, str(tax_id))  # Ensure subfolder name is a string
            
            # Check if the subfolder exists
            if os.path.exists(subfolder_path) and os.path.isdir(subfolder_path):
                print(f"Processing subfolder: {tax_id}")
                
                # Step 1: Read the contents of all files in the subfolder
                content = self.read_subfolder_files(subfolder_path)
                
                # Step 2: Save the combined content to the output folder
                self.save_subfolder_content(tax_id, content)
            else:
                print(f"Subfolder {tax_id} does not exist at {subfolder_path}")

# Example usage
if __name__ == "__main__":
    excel_path = "path_to_excel_file.xlsx"  # Update to your actual file path
    root_folder_path = "path_to_root_folder"  # Update to your actual folder path
    output_folder_path = "path_to_output_folder"  # Update to your desired output path

    # Create an instance of FolderProcessor
    folder_processor = FolderProcessor(excel_path, root_folder_path, output_folder_path)
    
    # Start processing subfolders
    folder_processor.process_folders()

