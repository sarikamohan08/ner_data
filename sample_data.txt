import pandas as pd

# Load the Excel file and read all sheets into a dictionary of DataFrames
excel_file = "your_file.xlsx"
sheets_dict = pd.read_excel(excel_file, sheet_name=None, header=None)  # Load without headers

# Initialize a list to collect reshaped data from all sheets
all_reshaped_data = []

# Define a helper function to find the header row
def find_header_row(df, keyword='coding/def'):
    for i, row in df.iterrows():
        if keyword in row.values:
            return i
    return None

# Loop through each sheet's DataFrame in the dictionary
for sheet_name, df in sheets_dict.items():
    # Find the header row in the current sheet
    header_row = find_header_row(df)
    
    if header_row is not None:
        # Reload the sheet using the found header row
        df = pd.read_excel(excel_file, sheet_name=sheet_name, header=header_row)
        
        # Filter out rows where "coding/def" is empty or null
        df_filtered = df[df['coding/def'].notnull() & (df['coding/def'] != '')]
        
        # Identify dynamic provider columns by selecting all columns after the "coding/def" column
        start_column = df.columns.get_loc("coding/def") + 1  # Get index after "coding/def"
        provider_columns = df.columns[start_column:]  # All columns after "coding/def"
        
        # Process each row in the filtered DataFrame
        for index, row in df_filtered.iterrows():
            # Extract service description, ms-DRG, rev code, ICD9/ICD10, and notes
            service_description = row['Service description']
            ms_drg = row['Ms-DRG']
            rev_code = row['Rev code']
            icd_codes = row['ICD9,ICD10']
            notes = row.get('Notes', '')  # Get 'Notes' if it exists, otherwise default to an empty string
            
            # Separate coding definitions if multiple values are present
            coding_defs = row['coding/def'].split(',') if pd.notnull(row['coding/def']) else ['']
            
            # Loop through each dynamically identified provider column and create rows for each
            for provider in provider_columns:
                provider_name = provider  # Use the column name as the provider name
                for coding_def in coding_defs:
                    # If both Ms-DRG and Rev Code are present, create two rows
                    if pd.notnull(ms_drg) and pd.notnull(rev_code):
                        # Row with Ms-DRG
                        all_reshaped_data.append({
                            'Provider': provider_name,
                            'Service Description': service_description,
                            'Ms-DRG': 'X',  # Place "X" in Ms-DRG column
                            'Rev Code': '',  # Leave Rev Code blank
                            'ICD9,ICD10': icd_codes,
                            'Coding/Def': coding_def.strip(),
                            'Notes': notes
                        })
                        # Row with Rev Code
                        all_reshaped_data.append({
                            'Provider': provider_name,
                            'Service Description': service_description,
                            'Ms-DRG': '',  # Leave Ms-DRG blank
                            'Rev Code': 'X',  # Place "X" in Rev Code column
                            'ICD9,ICD10': icd_codes,
                            'Coding/Def': coding_def.strip(),
                            'Notes': notes
                        })
                    else:
                        # Single row if only one of Ms-DRG or Rev Code is present
                        all_reshaped_data.append({
                            'Provider': provider_name,
                            'Service Description': service_description,
                            'Ms-DRG': ms_drg if pd.notnull(ms_drg) else '',
                            'Rev Code': rev_code if pd.notnull(rev_code) else '',
                            'ICD9,ICD10': icd_codes,
                            'Coding/Def': coding_def.strip(),
                            'Notes': notes
                        })

# Convert the reshaped data to a single DataFrame
reshaped_df = pd.DataFrame(all_reshaped_data)

# Display the new DataFrame
print(reshaped_df)

# Optionally, save the reshaped data to a new Excel file
reshaped_df.to_excel("reshaped_output_combined.xlsx", index=False)
