import pdfplumber
import openai
import time

openai.api_key = "YOUR_OPENAI_API_KEY"
EMBED_MODEL = "text-embedding-3-small"

def extract_table_texts_with_headers(pdf_path):
    table_texts = []
    with pdfplumber.open(pdf_path) as pdf:
        for page_num, page in enumerate(pdf.pages):
            tables = page.extract_tables()
            for table_index, table in enumerate(tables):
                if not table or len(table) < 2:
                    continue  # skip empty or header-only tables
                header = [h.strip() if h else "" for h in table[0]]
                for row in table[1:]:
                    if not row or len(row) != len(header):
                        continue
                    cells = [cell.strip() if cell else "" for cell in row]
                    row_dict = dict(zip(header, cells))
                    formatted_row = ", ".join(f"{k}: {v}" for k, v in row_dict.items() if v)
                    text = f"[Page {page_num+1} Table {table_index+1}] {formatted_row}"
                    table_texts.append(text)
    return table_texts

def extract_regular_page_text(pdf_path):
    page_texts = []
    with pdfplumber.open(pdf_path) as pdf:
        for page_num, page in enumerate(pdf.pages):
            text = page.extract_text()
            if text:
                lines = [line.strip() for line in text.splitlines() if line.strip()]
                if lines:
                    joined = ' '.join(lines)
                    page_texts.append(f"[Page {page_num+1} Text] {joined}")
    return page_texts

def embed_texts(texts, model=EMBED_MODEL):
    vectors = []
    for i, text in enumerate(texts):
        try:
            print(f"🔹 Embedding {i+1}/{len(texts)}")
            response = openai.embeddings.create(input=text, model=model)
            vectors.append(response.data[0].embedding)
        except Exception as e:
            print(f"❌ Embedding failed at index {i+1}: {e}")
            vectors.append([])
        time.sleep(0.5)
    return vectors

def save_embeddings(vectors, filename='embeddings.txt'):
    with open(filename, 'w') as f:
        for vec in vectors:
            if vec:
                f.write(' '.join(map(str, vec)) + '\n')

def save_texts(texts, filename='texts.txt'):
    with open(filename, 'w') as f:
        for text in texts:
            f.write(text + '\n')

if __name__ == "__main__":
    pdf_path = "your_file.pdf"  # Replace with actual PDF path

    print("📄 Extracting regular text...")
    page_texts = extract_regular_page_text(pdf_path)

    print("📊 Extracting table rows (with headers)...")
    table_texts = extract_table_texts_with_headers(pdf_path)

    all_texts = page_texts + table_texts
    print(f"📦 Total chunks to embed: {len(all_texts)}")

    print("🧠 Generating embeddings...")
    embeddings = embed_texts(all_texts)

    print("💾 Saving outputs...")
    save_texts(all_texts)
    save_embeddings(embeddings)

    print("✅ All done! Embedded regular and table content separately and clearly.")
