import spacy
from spacy.tokens import DocBin
from spacy.training import Example
import random

# Define training data (replace with your actual annotated data)
train_data = [
    ("John Doe, Member ID: 12345, SSN: 987-65-4321, Effective Date: 2022-01-01",
     {"entities": [(0, 8, "PATIENT_NAME"), (20, 25, "MEMBER_ID"), (30, 41, "SSN"), (57, 67, "EFFECTIVE_DATE")]}),
    ("Jane Smith, Member ID: 54321, SSN: 123-45-6789, Effective Date: 2023-02-15",
     {"entities": [(0, 10, "PATIENT_NAME"), (22, 27, "MEMBER_ID"), (32, 43, "SSN"), (59, 69, "EFFECTIVE_DATE")]}),
    # Add more examples as needed
]

# Load a blank English NLP model
nlp = spacy.blank("en")

# Create a new entity recognizer
ner = nlp.add_pipe("ner")

# Add labels to the entity recognizer
labels = ["PATIENT_NAME", "MEMBER_ID", "SSN", "EFFECTIVE_DATE"]
for label in labels:
    ner.add_label(label)

# Convert training data to spaCy's format
db = DocBin()
for text, annotations in train_data:
    doc = nlp.make_doc(text)
    ents = []
    for start, end, label in annotations["entities"]:
        span = doc.char_span(start, end, label=label)
        if span:
            ents.append(span)
    doc.ents = ents
    db.add(doc)

# Save training data to disk
db.to_disk("training_data.spacy")

# Initialize the model
optimizer = nlp.initialize()

# Train the model
n_iter = 30
for i in range(n_iter):
    random.shuffle(train_data)
    losses = {}
    for text, annotations in train_data:
        example = Example.from_dict(nlp.make_doc(text), annotations)
        nlp.update([example], drop=0.5, losses=losses)
    print(f"Losses at iteration {i}: {losses}")

# Save the trained model
nlp.to_disk("custom_ner_model")

# Load the trained model
nlp = spacy.load("custom_ner_model")

# Test the model
test_text = "Michael Johnson, Member ID: 98765, SSN: 111-22-3333, Effective Date: 2024-07-31"
doc = nlp(test_text)
for ent in doc.ents:
    print(ent.text, ent.label_)

# Function to check for the presence of Effective Date
def has_effective_date(text):
    doc = nlp(text)
    for ent in doc.ents:
        if ent.label_ == "EFFECTIVE_DATE":
            return True
    return False

# Check if a text contains an effective date
print("Has Effective Date:", has_effective_date(test_text))
