import openai
import base64
import fitz  
import os
from datetime import datetime

class SimplePDFExtractor:
    def __init__(self, api_key):
        self.client = openai.OpenAI(api_key=api_key)
    
    def pdf_to_images(self, pdf_path, dpi=200):
        """Convert PDF pages to base64 images"""
        doc = fitz.open(pdf_path)
        images = []
        
        for page_num in range(doc.page_count):
            page = doc[page_num]
            mat = fitz.Matrix(dpi/72, dpi/72)
            pix = page.get_pixmap(matrix=mat)
            img_data = pix.tobytes("png")
            img_base64 = base64.b64encode(img_data).decode('utf-8')
            images.append(img_base64)
        
        doc.close()
        return images
    
    def extract_text_and_tables(self, image_base64):
        """Extract text and tables from a single page"""
        
        prompt = """
        Extract ALL text and tables from this PDF page image.
        
        For regular text:
        - Preserve paragraphs and line breaks
        - Maintain headings and subheadings
        - Keep bullet points and numbered lists
        
        For tables:
        - Format tables clearly with columns aligned
        - Use | to separate columns
        - Include table headers
        - Add a blank line before and after each table
        
        Output only the extracted text and tables. Do not add any commentary or explanations.
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": prompt},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/png;base64,{image_base64}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                max_tokens=4000,
                temperature=0
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            return f"Error extracting from page: {str(e)}"
    
    def extract_pdf_to_text_file(self, pdf_path, output_file=None):
        """Extract text and tables from PDF and save to text file"""
        
       
        if not output_file:
            base_name = os.path.splitext(os.path.basename(pdf_path))[0]
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"{base_name}_extracted_{timestamp}.txt"
        
        print(f"Processing PDF: {pdf_path}")
        print(f"Output file: {output_file}")
       
        images = self.pdf_to_images(pdf_path)
        total_pages = len(images)
        
       
        all_text = []
        all_text.append(f"Text extracted from: {os.path.basename(pdf_path)}")
        all_text.append(f"Extraction date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        all_text.append("=" * 60)
        all_text.append("")
        
        for i, image_base64 in enumerate(images, 1):
            print(f"Processing page {i} of {total_pages}...")
            
            page_text = self.extract_text_and_tables(image_base64)
            
            all_text.append(f"--- PAGE {i} ---")
            all_text.append("")
            all_text.append(page_text)
            all_text.append("")
            all_text.append("")  
        
        
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write('\n'.join(all_text))
            
            print(f"✓ Text extraction completed!")
            print(f"✓ Saved to: {output_file}")
            return output_file
            
        except Exception as e:
            print(f"Error saving file: {str(e)}")
            return None


def extract_pdf_text(pdf_path, api_key, output_file=None):
    """
    Simple function to extract text and tables from PDF
    
    Args:
        pdf_path: Path to the PDF file
        api_key: OpenAI API key
        output_file: Optional output filename (auto-generated if not provided)
    
    Returns:
        Path to the created text file
    """
    extractor = SimplePDFExtractor(api_key)
    return extractor.extract_pdf_to_text_file(pdf_path, output_file)


if __name__ == "__main__":
    
    PDF_FILE = "example.pdf" 
    API_KEY = "your-openai-api-key-here"  
    OUTPUT_FILE = "extracted_text.txt" 
    
    
    result = extract_pdf_text(PDF_FILE, API_KEY, OUTPUT_FILE)
    
    if result:
        print(f"\nExtraction successful! Check the file: {result}")
        
        try:
            with open(result, 'r', encoding='utf-8') as f:
                preview = f.read(500)
                print("\nPreview of extracted text:")
                print("-" * 40)
                print(preview)
                if len(preview) == 500:
                    print("...")
        except Exception as e:
            print(f"Could not preview file: {e}")
    else:
        print("Extraction failed!")


def batch_extract_pdfs(pdf_folder, api_key, output_folder="extracted_texts"):
    """Extract text from multiple PDFs in a folder"""
    
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    
    extractor = SimplePDFExtractor(api_key)
    pdf_files = [f for f in os.listdir(pdf_folder) if f.lower().endswith('.pdf')]
    
    print(f"Found {len(pdf_files)} PDF files to process")
    
    for i, pdf_file in enumerate(pdf_files, 1):
        print(f"\n--- Processing {i}/{len(pdf_files)}: {pdf_file} ---")
        
        pdf_path = os.path.join(pdf_folder, pdf_file)
        output_name = os.path.splitext(pdf_file)[0] + "_extracted.txt"
        output_path = os.path.join(output_folder, output_name)
        
        result = extractor.extract_pdf_to_text_file(pdf_path, output_path)
        
        if result:
            print(f"Completed: {pdf_file}")
        else:
            print(f"Failed: {pdf_file}")
    
    print(f"\nBatch processing completed! Check folder: {output_folder}")

