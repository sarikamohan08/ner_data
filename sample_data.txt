    def save_to_excel(self, result_file):
        """
        Save the extracted data to the specified result_file, appending new data after each file is processed.
        """
        df = pd.DataFrame(self.extracted_data)

        # Check if the result file exists
        if os.path.exists(result_file):
            with pd.ExcelWriter(result_file, mode='a', engine='openpyxl', if_sheet_exists='overlay') as writer:
                df.to_excel(writer, sheet_name='Results', index=False, header=False, startrow=writer.sheets['Results'].max_row)
        else:
            with pd.ExcelWriter(result_file, mode='w', engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='Results', index=False)
        
        # Clear the extracted_data list after saving to avoid duplicate entries
        self.extracted_data.clear()



import pandas as pd
import re

class ExcelDataExtractor:
    def __init__(self, excel_path, service_address_keywords=None, notice_address_keywords=None, para_keywords=None, date_pattern=None):
        self.excel_path = excel_path
        
        # Service and Notice address-related keywords
        self.service_address_keywords = service_address_keywords or ['service address', 'service location', 'delivery address']
        self.notice_address_keywords = notice_address_keywords or ['notice address', 'legal notice', 'notification address']

        # Keywords for paragraphs and regex pattern for effective dates
        self.para_keywords = para_keywords or ['paragraph', 'section', 'clause']
        self.date_pattern = date_pattern or r'\b(?:Effective Date|effective date)\b\s*:\s*(\d{2}/\d{2}/\d{4}|\d{2}-\d{2}-\d{4})'

    def load_excel(self):
        """
        Load the Excel file into a DataFrame.
        """
        try:
            df = pd.read_excel(self.excel_path, sheet_name=None)  # Load all sheets
            return df
        except Exception as e:
            print(f"Error loading Excel file: {e}")
            return {}

    def contains_address_type(self, df, keywords):
        """
        Check if any cell in a DataFrame contains specific address-related keywords.
        """
        for keyword in keywords:
            if df.apply(lambda x: x.astype(str).str.contains(keyword, case=False, na=False).any()).any():
                return True
        return False

    def search_for_patterns(self, text):
        """
        Search the extracted text for paragraph keywords and effective dates.
        """
        # Search for paragraphs using the para_keywords
        paragraphs = []
        for keyword in self.para_keywords:
            para_matches = re.findall(rf'\b{keyword}\b.*', text, flags=re.IGNORECASE)
            paragraphs.extend(para_matches)

        # Search for effective dates using the date_pattern
        effective_dates = re.findall(self.date_pattern, text)

        return paragraphs, effective_dates

    def process_excel(self):
        """
        Process the Excel file, extracting relevant data.
        """
        all_data = []

        # Load the Excel data
        sheets = self.load_excel()

        # Iterate through all sheets
        for sheet_name, df in sheets.items():
            # Convert DataFrame to string to search for patterns
            text = df.astype(str).agg(' '.join)

            # Initialize lists to store address-related data
            service_data = []
            notice_data = []
            
            # Check for service address-related keywords and collect entire sheet if found
            if self.contains_address_type(df, self.service_address_keywords):
                service_data.append(df.to_string(index=False))  # Append the entire DataFrame as a string
            
            # Check for notice address-related keywords and collect entire sheet if found
            if self.contains_address_type(df, self.notice_address_keywords):
                notice_data.append(df.to_string(index=False))  # Append the entire DataFrame as a string

            # Search for paragraphs and effective dates
            paragraphs, effective_dates = self.search_for_patterns(text)

            # Store extracted data
            data = {
                'sheet_name': sheet_name,
                'service_addresses': '\n'.join(service_data) if service_data else '',
                'notice_addresses': '\n'.join(notice_data) if notice_data else '',
                'paragraphs': '\n'.join(paragraphs) if paragraphs else '',
                'effective_dates': ', '.join(effective_dates) if effective_dates else ''
            }
            all_data.append(data)

        # Convert all collected data to a DataFrame
        result_df = pd.DataFrame(all_data)
        return result_df
    
    def append_to_result_file(self):
        """
        Append the extracted data after each file to the Excel result file.
        """
        if os.path.exists(self.result_file):
            # Load existing Excel file
            existing_df = pd.read_excel(self.result_file)
        else:
            # Create an empty DataFrame if the file doesn't exist
            existing_df = pd.DataFrame()

        # Convert the new extracted data to a DataFrame
        new_df = pd.DataFrame(self.extracted_data)

        # Append the new data to the existing DataFrame
        updated_df = pd.concat([existing_df, new_df], ignore_index=True)

        # Save the updated DataFrame back to the Excel file
        updated_df.to_excel(self.result_file, index=False)
        print(f"Appended new data to {self.result_file}")

        # Clear extracted data list after saving to avoid duplicates
        self.extracted_data = []

# Usage
if __name__ == "__main__":
    excel_path = 'path_to_single_excel_file.xlsx'  # Path to the single Excel file you want to process

    # Define optional regex patterns and keywords
    para_keywords = ['paragraph', 'section', 'clause']
    date_pattern = r'\b(?:Effective Date|effective date)\b\s*:\s*(\d{2}/\d{2}/\d{4}|\d{2}-\d{2}-\d{4})'

    # Define specific address keywords
    service_address_keywords = ['service address', 'service location', 'delivery address']
    notice_address_keywords = ['notice address', 'legal notice', 'notification address']

    # Create an instance of the extractor
    extractor = ExcelDataExtractor(excel_path, service_address_keywords=service_address_keywords, notice_address_keywords=notice_address_keywords, para_keywords=para_keywords, date_pattern=date_pattern)

    # Process the Excel file and get the results in a DataFrame
    result_df = extractor.process_excel()

    # Output the result
    print(result_df)
