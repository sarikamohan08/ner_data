import os
import pandas as pd

# Folder containing Excel files
excel_folder = 'path_to_excel_folder'
output_excel = 'combined_address_related_data.xlsx'  # Output Excel file
address_keywords = ['address', 'location', 'street', 'city', 'state', 'zip', 'postal']  # Add more keywords if needed

# Function to check if any cell in a DataFrame contains address-related keywords
def contains_address_keywords(df):
    for keyword in address_keywords:
        if df.apply(lambda x: x.astype(str).str.contains(keyword, case=False, na=False).any()).any():
            return True
    return False

# Function to check if a file is a valid Excel file
def is_valid_excel_file(filepath):
    try:
        pd.ExcelFile(filepath)
        return True
    except Exception as e:
        print(f"Invalid Excel file or error reading '{filepath}': {e}")
        return False

# Dictionary to store the combined address-related data
address_data_combined = {}

# Iterate over each file in the folder
for filename in os.listdir(excel_folder):
    if filename.lower().endswith('.xlsx'):
        excel_path = os.path.join(excel_folder, filename)
        
        # Check if the file is a valid Excel file
        if not is_valid_excel_file(excel_path):
            print(f"Skipping '{filename}' as it is not a valid Excel file.")
            continue
        
        try:
            # Load the Excel file
            excel_file = pd.ExcelFile(excel_path)
        except Exception as e:
            print(f"Error reading {filename}: {e}. Skipping this file.")
            continue  # Skip to the next file
        
        # List to hold address-related data for different sheets in the file
        file_data = []
        
        for sheet_name in excel_file.sheet_names:
            try:
                df = pd.read_excel(excel_path, sheet_name=sheet_name)
            except Exception as e:
                print(f"Error reading sheet '{sheet_name}' in {filename}: {e}. Skipping this sheet.")
                continue  # Skip to the next sheet
            
            # Check if the DataFrame contains address-related keywords
            if contains_address_keywords(df):
                # Convert the entire DataFrame to a string and store it in the file_data list
                file_data.append(df.to_string(index=False))
                print(f'Address-related data found in sheet "{sheet_name}" of file "{filename}".')
        
        # If any address data was found in the file, add it to the dictionary
        if file_data:
            address_data_combined[filename] = file_data

# Convert the dictionary to a DataFrame for output
output_data = []
for file_name, sheets_data in address_data_combined.items():
    # Prepare a row for each file, placing the file name and the sheet data in separate columns
    row = [file_name] + sheets_data
    output_data.append(row)

# Determine the maximum number of columns needed (in case different files have different numbers of sheets)
max_columns = max(len(row) for row in output_data)

# Create a DataFrame from the output data, filling in with NaN for missing columns
output_df = pd.DataFrame(output_data, columns=['File Name'] + [f'Address Data {i+1}' for i in range(max_columns - 1)])

# Save the combined data into a single Excel sheet
output_df.to_excel(output_excel, index=False)

print(f"Combined address-related data saved to {output_excel}.")
