import openai
import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

openai.api_key = "YOUR_OPENAI_API_KEY"

def load_embeddings(path='embeddings.txt'):
    with open(path) as f:
        return np.array([list(map(float, line.split())) for line in f])

def load_texts(path='texts.txt'):
    with open(path) as f:
        return [line.strip() for line in f]

def embed_query(query, model="text-embedding-3-small"):
    response = openai.embeddings.create(input=query, model=model)
    return np.array(response.data[0].embedding)

def get_best_match(query, texts, vectors):
    query_vec = embed_query(query)
    similarities = cosine_similarity([query_vec], vectors)[0]
    best_index = np.argmax(similarities)
    return texts[best_index], similarities[best_index]

def run_structured_queries(queries_dict):
    texts = load_texts()
    vectors = load_embeddings()

    results = []
    for key, query in queries_dict.items():
        best_text, score = get_best_match(query, texts, vectors)
        results.append({
            "field": key,
            "query": query,
            "match_text": best_text,
            "similarity_score": score
        })

    return pd.DataFrame(results)

if __name__ == "__main__":
    queries = {
        "taxid": "extract tax id",
        "npi": "extract npi",
        "address": "extract practice address",
        "phone": "extract phone number"
    }

    df = run_structured_queries(queries)
    print(df)
    df.to_csv("extracted_fields.csv", index=False)
    print("\nâœ… Results saved to 'extracted_fields.csv'")
