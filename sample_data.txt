import pandas as pd

# Load the Excel file with multiple sheets
input_file = 'input_file.xlsx'  # Replace with your Excel file name
output_file = 'output_file.xlsx'

# Load all sheets from the Excel file into a dictionary of DataFrames
sheets = pd.read_excel(input_file, sheet_name=None, header=None)  # header=None will not use the first row as headers

# Define exact keywords for standard columns (columns we want to exclude)
standard_column_keywords = [
    'Service Description', 
    'MS-DRG', 
    'Rev Code', 
    'ICD9/I CD10', 
    'CPT', 
    'Coding/Definition'
]

# Placeholder for transformed data
transformed_data = []

# Debugging: Track processing
print("Processing sheets...")

# Iterate through each sheet
for sheet_name, df in sheets.items():
    print(f"Processing sheet: {sheet_name}")
    
    # Print first few rows to understand the structure
    print(f"First few rows of the sheet:\n{df.head()}")
    
    # Assume that the actual header row is in the 2nd or 3rd row (adjust if necessary)
    # You may need to manually set the header row or identify it dynamically
    header_row_index = 1  # Set to the row index where your header is located (0-indexed)

    # Reload the sheet with the correct header row
    df = pd.read_excel(input_file, sheet_name=sheet_name, header=header_row_index)
    
    # After loading, ensure the column names are standardized by stripping extra spaces
    df.columns = df.columns.str.strip()

    # Identify provider columns dynamically by excluding standard columns
    provider_columns = [
        col for col in df.columns
        if col not in standard_column_keywords
    ]
    
    print(f"Detected provider columns: {provider_columns}")
    
    # Process each sheet
    for index, row in df.iterrows():
        # Debugging: Print row being processed
        print(f"Processing row {index}: {row.to_dict()}")
        
        if pd.notna(row.get('Service Description')):  # Check if "Service Description" is not NaN
            # Split coding/def values and repeat rows
            coding_values = str(row.get('Coding/Definition', '')).split(' AND ')
            for coding_value in coding_values:
                for provider in provider_columns:
                    provider_value = row.get(provider, None)
                    # Add to the transformed data
                    transformed_data.append({
                        'Provider': provider,
                        'Service Description': row.get('Service Description'),
                        'MS-DRG': row.get('MS-DRG'),
                        'Rev Code': row.get('Rev Code'),
                        'ICD9/I CD10': row.get('ICD9/I CD10'),
                        'CPT': row.get('CPT'),
                        'Coding/Definition': coding_value.strip(),
                        'Billed Charges/Percent': provider_value
                    })

# Create a new DataFrame from the transformed data
if transformed_data:
    transformed_df = pd.DataFrame(transformed_data)
    # Save the transformed data to a new Excel file
    transformed_df.to_excel(output_file, index=False)
    print(f"Transformed data saved to {output_file}")
else:
    print("No data was transformed. Check input file for data issues.")
