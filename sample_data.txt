import os
import pandas as pd

class ExcelTableExtractor:
    def __init__(self, excel_file, address_keywords=None):
        self.excel_file = excel_file

        # Define the keywords for different address/contact information types
        self.address_keywords = address_keywords or ['address', 'location', 'street', 'city', 'state', 'zip', 'postal']
        self.service_address_keyword = 'service address'
        self.remit_address_keyword = 'remit address'
        self.notice_address_keyword = 'notice address'
        self.contract_contact_keywords = ['contract contact information', 'contract contact']  # Multiple keywords
        self.contact_information_keyword = 'contact information'

    def contains_keywords(self, df, keywords):
        """
        Check if any cell in a DataFrame contains any of the specified keywords.
        """
        if isinstance(keywords, list):
            for keyword in keywords:
                if df.apply(lambda x: x.astype(str).str.contains(keyword, case=False, na=False).any()).any():
                    return True
        else:
            if df.apply(lambda x: x.astype(str).str.contains(keywords, case=False, na=False).any()).any():
                return True
        return False

    def extract_address_data(self, df):
        """
        Extract data related to the specific address categories from a DataFrame.
        """
        address_data = {
            'address': '', 
            'service_address': '', 
            'remit_address': '', 
            'notice_address': '', 
            'contract_contact': '', 
            'contact_information': ''
        }

        # Check for general address-related keywords
        if self.contains_keywords(df, self.address_keywords):
            address_data['address'] = df.to_string(index=False)

        # Check for specific address/contact categories
        if self.contains_keywords(df, [self.service_address_keyword]):
            address_data['service_address'] = df.to_string(index=False)

        if self.contains_keywords(df, [self.remit_address_keyword]):
            address_data['remit_address'] = df.to_string(index=False)

        if self.contains_keywords(df, [self.notice_address_keyword]):
            address_data['notice_address'] = df.to_string(index=False)

        if self.contains_keywords(df, self.contract_contact_keywords):
            address_data['contract_contact'] = df.to_string(index=False)

        if self.contains_keywords(df, [self.contact_information_keyword]):
            address_data['contact_information'] = df.to_string(index=False)

        return address_data

    def extract_from_excel(self):
        """
        Extract tables from an Excel file, classify address-related data, and return as a DataFrame.
        """
        # Read the entire Excel file
        xls = pd.ExcelFile(self.excel_file)
        
        extracted_data = []
        
        # Loop through each sheet in the Excel file
        for sheet_name in xls.sheet_names:
            df = pd.read_excel(self.excel_file, sheet_name=sheet_name)
            
            # Extract address-related data from each sheet
            sheet_data = self.extract_address_data(df)
            sheet_data['Sheet Name'] = sheet_name  # Add sheet name for context
            extracted_data.append(sheet_data)
        
        # Convert the extracted data into a DataFrame
        return pd.DataFrame(extracted_data)

# Usage
if __name__ == "__main__":
    excel_file = 'path_to_your_excel_file.xlsx'  # Path to the Excel file
    extractor = ExcelTableExtractor(excel_file)
    address_data_df = extractor.extract_from_excel()

    # Now you have the extracted address data in a DataFrame
    print(address_data_df)
