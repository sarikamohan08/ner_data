import pandas as pd
import re

# Load the Excel file and read all sheets into a dictionary of DataFrames
excel_file = "your_file.xlsx"
sheets_dict = pd.read_excel(excel_file, sheet_name=None, header=None)  # Load without headers

# Initialize a list to collect reshaped data from all sheets
all_reshaped_data = []

# Define a helper function to find the header row
def find_header_row(df, keyword='coding/def'):
    for i, row in df.iterrows():
        if keyword in row.values:
            return i
    return None

# Loop through each sheet's DataFrame in the dictionary
for sheet_name, df in sheets_dict.items():
    # Find the header row in the current sheet
    header_row = find_header_row(df)
    
    if header_row is not None:
        # Reload the sheet using the found header row
        df = pd.read_excel(excel_file, sheet_name=sheet_name, header=header_row)
        
        # Filter out rows where "coding/def" is empty or null
        df_filtered = df[df['coding/def'].notnull() & (df['coding/def'] != '')]
        
        # Identify dynamic provider columns by selecting all columns after the "coding/def" column
        start_column = df.columns.get_loc("coding/def") + 1  # Get index after "coding/def"
        provider_columns = df.columns[start_column:]  # All columns after "coding/def"
        
        # Process each row in the filtered DataFrame
        for index, row in df_filtered.iterrows():
            # Extract service description, ms-DRG, rev code, ICD9/ICD10, and CPT values
            service_description = row['Service description']
            ms_drg_codes = row['Ms-DRG'].split(',') if pd.notnull(row['Ms-DRG']) else []
            rev_code_values = row['Rev code'].split(',') if pd.notnull(row['Rev code']) else []
            icd_codes = row['ICD9,ICD10']
            cpt_values = row['CPT'].split(',') if 'CPT' in df.columns and pd.notnull(row['CPT']) else []
            
            # Separate coding definitions if multiple values are present
            coding_defs = row['coding/def'].split(',') if pd.notnull(row['coding/def']) else ['']
            
            # Loop through each provider column to create rows for each combination
            for provider in provider_columns:
                provider_name = provider
                provider_value = row[provider]  # The cell value for this provider
                
                # Extract percentages and dollar amounts using regex
                amount_rate = re.search(r'(\d+%)', str(provider_value))
                amount = re.search(r'\$([\d,]+)', str(provider_value))
                
                # If matched, extract text; if not, default to an empty string
                amount_rate = amount_rate.group(1) if amount_rate else ''
                amount = amount.group(0) if amount else ''
                
                # For Ms-DRG, Rev Code, and CPT values, split into individual rows
                for coding_def in coding_defs:
                    coding_def = coding_def.strip()  # Clean up extra whitespace
                    
                    # Process each MS-DRG code individually
                    for ms_drg in ms_drg_codes:
                        all_reshaped_data.append({
                            'Sheet Name': sheet_name,
                            'Provider': provider_name,
                            'Service Description': service_description,
                            'Ms-DRG': 'X',
                            'Rev Code': '',
                            'ICD9,ICD10': '',
                            'CPT': '',
                            'Coding/Def': ms_drg.strip(),
                            'Amount Rate': amount_rate,
                            'Amount': amount
                        })
                    
                    # Process each Rev Code individually
                    for rev_code in rev_code_values:
                        all_reshaped_data.append({
                            'Sheet Name': sheet_name,
                            'Provider': provider_name,
                            'Service Description': service_description,
                            'Ms-DRG': '',
                            'Rev Code': 'X',
                            'ICD9,ICD10': '',
                            'CPT': '',
                            'Coding/Def': rev_code.strip(),
                            'Amount Rate': amount_rate,
                            'Amount': amount
                        })
                    
                    # Process each CPT code individually
                    for cpt in cpt_values:
                        all_reshaped_data.append({
                            'Sheet Name': sheet_name,
                            'Provider': provider_name,
                            'Service Description': service_description,
                            'Ms-DRG': '',
                            'Rev Code': '',
                            'ICD9,ICD10': '',
                            'CPT': 'X',
                            'Coding/Def': cpt.strip(),
                            'Amount Rate': amount_rate,
                            'Amount': amount
                        })
                    
                    # If Ms-DRG, Rev Code, and CPT are empty, only add ICD9,ICD10 and Coding/Def if relevant
                    if not ms_drg_codes and not rev_code_values and not cpt_values:
                        all_reshaped_data.append({
                            'Sheet Name': sheet_name,
                            'Provider': provider_name,
                            'Service Description': service_description,
                            'Ms-DRG': '',
                            'Rev Code': '',
                            'ICD9,ICD10': icd_codes,
                            'CPT': '',
                            'Coding/Def': coding_def,
                            'Amount Rate': amount_rate,
                            'Amount': amount
                        })

# Convert the reshaped data to a single DataFrame
reshaped_df = pd.DataFrame(all_reshaped_data)

# Display the new DataFrame
print(reshaped_df)

# Optionally, save the reshaped data to a new Excel file
reshaped_df.to_excel("reshaped_output_with_amounts.xlsx", index=False)
