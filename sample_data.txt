import pdfplumber
import openai
import time

openai.api_key = "YOUR_OPENAI_API_KEY"  # Replace with your actual key

EMBED_MODEL = "text-embedding-3-small"

def extract_tables_as_text(pdf_path):
    extracted_texts = []
    with pdfplumber.open(pdf_path) as pdf:
        for page_num, page in enumerate(pdf.pages):
            tables = page.extract_tables()
            for table_index, table in enumerate(tables):
                if not table or not table[0]:
                    continue
                header = table[0]
                for row in table[1:]:
                    if len(row) != len(header):
                        continue  # skip malformed rows
                    row_dict = {header[i]: row[i] for i in range(len(header))}
                    formatted = ", ".join(f"{k.strip()}: {v.strip()}" for k, v in row_dict.items() if v)
                    extracted_texts.append(f"Page {page_num + 1}, Table {table_index + 1}: {formatted}")
    return extracted_texts

def embed_texts(texts, model=EMBED_MODEL):
    embeddings = []
    for i, text in enumerate(texts):
        try:
            print(f"Embedding row {i+1}/{len(texts)}...")
            response = openai.embeddings.create(input=text, model=model)
            embeddings.append(response.data[0].embedding)
        except Exception as e:
            print(f"‚ùå Failed to embed row {i+1}: {e}")
            embeddings.append([])
        time.sleep(0.5)  # avoid rate limit
    return embeddings

def save_embeddings(embeddings, filename='embeddings.txt'):
    with open(filename, 'w') as f:
        for vec in embeddings:
            if vec:
                f.write(' '.join(map(str, vec)) + '\n')

def save_texts(texts, filename='texts.txt'):
    with open(filename, 'w') as f:
        for line in texts:
            f.write(line + '\n')

if __name__ == "__main__":
    pdf_path = "your_file.pdf"  # üîÅ Replace with your actual PDF file

    print("üìÑ Extracting tables from PDF...")
    table_texts = extract_tables_as_text(pdf_path)
    print(f"‚úÖ Extracted {len(table_texts)} rows from tables.")

    print("üß† Generating embeddings...")
    embeddings = embed_texts(table_texts)

    print("üíæ Saving embeddings and text rows...")
    save_embeddings(embeddings)
    save_texts(table_texts)

    print("\n‚úÖ Done! Files saved:")
    print(" - embeddings.txt")
    print(" - texts.txt")
