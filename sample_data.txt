import os
import camelot
import pandas as pd
from openpyxl import Workbook
import pytesseract
from pdf2image import convert_from_path


class PDFTableExtractor:
    def __init__(self, pdf_folder, excel_folder, output_excel, address_keywords=None):
        self.pdf_folder = pdf_folder
        self.excel_folder = excel_folder
        self.output_excel = output_excel

        # Define the keywords for different address/contact information types
        self.address_keywords = address_keywords or ['address', 'location', 'street', 'city', 'state', 'zip', 'postal']
        self.service_address_keyword = 'service address'
        self.remit_address_keyword = 'remit address'
        self.notice_address_keyword = 'notice address'
        self.contract_contact_keyword = 'contract contact information'
        self.contact_information_keyword = 'contact information'

        # Storage for extracted data
        self.extracted_data_combined = []

        # Create the output folder if it doesn't exist
        if not os.path.exists(self.excel_folder):
            os.makedirs(self.excel_folder)

    def extract_tables_from_pdf(self, pdf_path):
        """
        Extract tables from a PDF file and return them.
        """
        try:
            tables = camelot.read_pdf(pdf_path, pages='all', flavor='stream')  # Use 'stream' flavor for structure-based tables
            if tables.n == 0:  # No tables found
                print(f"No tables found in {os.path.basename(pdf_path)}.")
            return tables
        except Exception as e:
            print(f"Error extracting tables from {os.path.basename(pdf_path)}: {e}")
            return None

    def extract_text_from_pdf(self, pdf_path):
        """
        Extract text from a PDF using pytesseract on images of each page.
        """
        try:
            # Convert PDF to images
            images = convert_from_path(pdf_path)

            full_text = ""
            for i, image in enumerate(images):
                # Use pytesseract to extract text from the image
                text = pytesseract.image_to_string(image)
                full_text += f"\n--- Page {i + 1} ---\n{text}"

            return full_text.strip()
        except Exception as e:
            print(f"Error extracting text from {os.path.basename(pdf_path)}: {e}")
            return ""

    def contains_keywords(self, df, keywords):
        """
        Check if any cell in a DataFrame contains any of the specified keywords.
        """
        for keyword in keywords:
            if df.apply(lambda x: x.astype(str).str.contains(keyword, case=False, na=False).any()).any():
                return True
        return False

    def extract_address_data(self, df):
        """
        Extract data related to the specific address categories from a DataFrame.
        """
        address_data = {
            'address': '', 
            'service_address': '', 
            'remit_address': '', 
            'notice_address': '', 
            'contract_contact': '', 
            'contact_information': ''
        }

        # Check for general address-related keywords
        if self.contains_keywords(df, self.address_keywords):
            address_data['address'] = df.to_string(index=False)

        # Check for specific address/contact categories
        if self.contains_keywords(df, [self.service_address_keyword]):
            address_data['service_address'] = df.to_string(index=False)

        if self.contains_keywords(df, [self.remit_address_keyword]):
            address_data['remit_address'] = df.to_string(index=False)

        if self.contains_keywords(df, [self.notice_address_keyword]):
            address_data['notice_address'] = df.to_string(index=False)

        if self.contains_keywords(df, [self.contract_contact_keyword]):
            address_data['contract_contact'] = df.to_string(index=False)

        if self.contains_keywords(df, [self.contact_information_keyword]):
            address_data['contact_information'] = df.to_string(index=False)

        return address_data

    def save_tables_to_excel(self, tables, filename, subfolder_name):
        """
        Save extracted tables to an Excel file inside a subfolder and store data based on the type of address found.
        """
        subfolder_excel_path = os.path.join(self.excel_folder, str(subfolder_name))  # Convert subfolder_name to string

        # Create a subfolder inside the Excel folder if it doesn't exist
        if not os.path.exists(subfolder_excel_path):
            os.makedirs(subfolder_excel_path)

        excel_filename = os.path.splitext(filename)[0] + '.xlsx'
        excel_path = os.path.join(subfolder_excel_path, excel_filename)

        extracted_file_data = {
            'File Name': filename, 
            'address': '', 
            'service_address': '', 
            'remit_address': '', 
            'notice_address': '', 
            'contract_contact': '', 
            'contact_information': ''
        }

        with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
            for i, table in enumerate(tables):
                df = table.df

                if df.empty:
                    print(f"Table {i+1} in {filename} is empty. Skipping...")
                    continue

                sheet_name = f'Table_{i+1}'
                df.to_excel(writer, sheet_name=sheet_name, index=False)

                # Extract and classify address-related data
                extracted_data = self.extract_address_data(df)

                # Update the extracted_file_data dictionary with the address data from this table
                for key in extracted_data:
                    if extracted_data[key]:  # If we have data for this category, concatenate it
                        extracted_file_data[key] += f"Table {i+1}:\n{extracted_data[key]}\n\n"

        # Append the extracted file data to the combined list
        self.extracted_data_combined.append(extracted_file_data)

        return subfolder_excel_path  # Return the subfolder path where the Excel is saved

    def save_text_to_file(self, text, filename, subfolder_path):
        """
        Save the extracted text to a .txt file in the same subfolder where the Excel file is saved.
        """
        text_filename = os.path.splitext(filename)[0] + '.txt'
        text_path = os.path.join(subfolder_path, text_filename)

        with open(text_path, 'w', encoding='utf-8') as text_file:
            text_file.write(text)

    def process_pdfs(self, folder_names):
        """
        Process all PDFs in the folder, extract tables, and extract address-related data.
        """
        for folder_name in folder_names:
            folder_path = os.path.join(self.pdf_folder, str(folder_name))  # Convert folder_name to string
            for filename in os.listdir(folder_path):
                if filename.endswith('.pdf'):
                    pdf_path = os.path.join(folder_path, filename)
                    print(f"Processing {filename} in {folder_name}...")

                    # Extract tables
                    tables = self.extract_tables_from_pdf(pdf_path)
                    if not tables:
                        print(f"Skipping {filename} (no tables found).")
                        continue

                    # Save tables to Excel in the specific subfolder
                    subfolder_path = self.save_tables_to_excel(tables, filename, folder_name)

                    # Extract text from PDF images
                    pdf_text = self.extract_text_from_pdf(pdf_path)
                    if pdf_text:
                        # Save the extracted text to a .txt file in the same subfolder
                        self.save_text_to_file(pdf_text, filename, subfolder_path)

    def save_combined_address_data(self):
        """
        Save all extracted address-related data into a single Excel file with separate columns for each category.
        """
        if self.extracted_data_combined:
            output_df = pd.DataFrame(self.extracted_data_combined)

            # Save the combined data to a single Excel file
            output_df.to_excel(self.output_excel, index=False)
            print(f"All address-related data saved to {self.output_excel}.")
        else:
            print("No address-related data found.")

    def run(self, folder_names):
        """
        Main function to process PDFs and save the extracted data into a single Excel file with separate columns.
        """
        print("Processing PDFs...")
        self.process_pdfs(folder_names)

        print("Saving combined address-related data...")
        self.save_combined_address_data()


# Usage
if __name__ == "__main__":
    pdf_folder = 'path_to_pdf_folder'  # Folder containing your PDF files
    excel_folder = 'path_to_excel_folder'  # Folder to store individual Excel files
    output_excel = 'combined_address_data.xlsx'  # Single output file for all address-related data

    # Load folder names from Excel
    excel_file_with_folder_names = 'folders.xlsx'
    df_folders = pd.read_excel(excel_file_with_folder_names)
    folder_names = df_folders['Folder Names'].tolist()

    extractor = PDFTableExtractor(pdf_folder, excel_folder, output_excel)
    extractor.run(folder_names)
