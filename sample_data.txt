import pdfplumber
import openai
import time

openai.api_key = "YOUR_OPENAI_API_KEY"

EMBED_MODEL = "text-embedding-3-small"

def extract_tables_as_text(pdf_path):
    structured_texts = []
    with pdfplumber.open(pdf_path) as pdf:
        for page_num, page in enumerate(pdf.pages):
            tables = page.extract_tables()
            for table_index, table in enumerate(tables):
                if not table or not table[0]:
                    continue
                header = table[0]
                for row in table[1:]:
                    if len(row) != len(header):
                        continue
                    row_dict = {
                        (header[i] or "").strip(): (row[i] or "").strip()
                        for i in range(len(header))
                    }
                    formatted = ", ".join(f"{k}: {v}" for k, v in row_dict.items() if v)
                    structured_texts.append(f"[Page {page_num+1} Table {table_index+1}] {formatted}")
    return structured_texts

def extract_regular_text(pdf_path):
    page_texts = []
    with pdfplumber.open(pdf_path) as pdf:
        for i, page in enumerate(pdf.pages):
            text = page.extract_text()
            if text:
                cleaned = ' '.join(line.strip() for line in text.splitlines() if line.strip())
                page_texts.append(f"[Page {i+1} Text] {cleaned}")
    return page_texts

def embed_texts(texts, model=EMBED_MODEL):
    vectors = []
    for i, text in enumerate(texts):
        try:
            print(f"Embedding {i+1}/{len(texts)}...")
            response = openai.embeddings.create(input=text, model=model)
            vectors.append(response.data[0].embedding)
        except Exception as e:
            print(f"❌ Failed to embed text {i+1}: {e}")
            vectors.append([])
        time.sleep(0.5)
    return vectors

def save_embeddings(embeddings, filename='embeddings.txt'):
    with open(filename, 'w') as f:
        for vec in embeddings:
            if vec:
                f.write(' '.join(map(str, vec)) + '\n')

def save_texts(texts, filename='texts.txt'):
    with open(filename, 'w') as f:
        for line in texts:
            f.write(line + '\n')

if __name__ == "__main__":
    pdf_path = "your_file.pdf"  # 🔁 Replace with your actual file

    print("📄 Extracting tables...")
    table_texts = extract_tables_as_text(pdf_path)

    print("📝 Extracting normal text...")
    regular_texts = extract_regular_text(pdf_path)

    combined_texts = regular_texts + table_texts
    print(f"✅ Total extracted chunks: {len(combined_texts)}")

    print("🧠 Embedding texts...")
    embeddings = embed_texts(combined_texts)

    print("💾 Saving...")
    save_texts(combined_texts, 'texts.txt')
    save_embeddings(embeddings, 'embeddings.txt')

    print("\n✅ Done! Embedded both tables and text.")
