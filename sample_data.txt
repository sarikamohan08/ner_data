pattern = r'^.*effective date.*$'

pattern = r'.*Federal Tax Id Number:\s*(EIN:\s*)?\S+.*'


pattern = r'.*(Federal Tax Id Number:\s*(EIN:\s*)?|\bEIN:\s*)\d{2}-?\d{2,}-?\d{4,}.*'
pattern = r'(Federal Tax Id Number:\s*(EIN:\s*)?|\bEIN:\s*)\s*\n?\s*(\d{2,}-?\d{2,}-?\d{4,}|\d+)'

pattern = r'(Federal Tax Id Number:\s*(EIN:\s*)?|EIN:\s*)\n?\s*(\d{2,}-?\d{2,}-?\d{4,}|\d{7,})'
import os
import camelot
import pandas as pd
from openpyxl import Workbook

class PDFTableExtractor:
    def __init__(self, pdf_folder, excel_folder, output_excel, address_keywords=None):
        self.pdf_folder = pdf_folder
        self.excel_folder = excel_folder
        self.output_excel = output_excel

        # Define all the keywords for different address/contact information
        self.address_keywords = address_keywords or ['address', 'location', 'street', 'city', 'state', 'zip', 'postal']
        self.service_address_keyword = 'service address'
        self.remit_address_keyword = 'remit address'
        self.notice_address_keyword = 'notice address'
        self.contract_contact_keyword = 'contract contact information'
        self.contact_information_keyword = 'contact information'

        # Storage for extracted data
        self.extracted_data_combined = []

        # Create the output folder if it doesn't exist
        if not os.path.exists(self.excel_folder):
            os.makedirs(self.excel_folder)

    def extract_tables_from_pdf(self, pdf_path):
        """
        Extract tables from a PDF file and return them.
        """
        try:
            tables = camelot.read_pdf(pdf_path, pages='all')
            if not tables:
                print(f"No tables found in {os.path.basename(pdf_path)}.")
            return tables
        except Exception as e:
            print(f"Error extracting tables from {os.path.basename(pdf_path)}: {e}")
            return None

    def contains_keywords(self, df, keyword_list):
        """
        Check if any cell in a DataFrame contains any keyword from a given list.
        """
        for keyword in keyword_list:
            if df.apply(lambda x: x.astype(str).str.contains(keyword, case=False, na=False).any()).any():
                return True
        return False

    def extract_address_data(self, df):
        """
        Extract data related to different address categories from a DataFrame.
        """
        address_data = {'address': '', 'service_address': '', 'remit_address': '', 'notice_address': '', 'contract_contact': '', 'contact_information': ''}

        # Check for general address-related data
        if self.contains_keywords(df, self.address_keywords):
            address_data['address'] = df.to_string(index=False)

        # Check for specific address/contact categories
        if self.contains_keywords(df, [self.service_address_keyword]):
            address_data['service_address'] = df.to_string(index=False)

        if self.contains_keywords(df, [self.remit_address_keyword]):
            address_data['remit_address'] = df.to_string(index=False)

        if self.contains_keywords(df, [self.notice_address_keyword]):
            address_data['notice_address'] = df.to_string(index=False)

        if self.contains_keywords(df, [self.contract_contact_keyword]):
            address_data['contract_contact'] = df.to_string(index=False)

        if self.contains_keywords(df, [self.contact_information_keyword]):
            address_data['contact_information'] = df.to_string(index=False)

        return address_data

    def save_tables_to_excel(self, tables, filename):
        """
        Save extracted tables to an Excel file with a sheet for each table.
        """
        excel_filename = os.path.splitext(filename)[0] + '.xlsx'
        excel_path = os.path.join(self.excel_folder, excel_filename)

        extracted_file_data = {'File Name': filename, 'address': '', 'service_address': '', 'remit_address': '', 'notice_address': '', 'contract_contact': '', 'contact_information': ''}

        with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
            for i, table in enumerate(tables):
                df = table.df

                if df.empty:
                    print(f"Table {i+1} in {filename} is empty. Skipping...")
                    continue

                sheet_name = f'Table_{i+1}'
                df.to_excel(writer, sheet_name=sheet_name, index=False)

                # Extract address-related data from this table
                extracted_data = self.extract_address_data(df)

                # Update the extracted_file_data dictionary with the address data from this table
                for key in extracted_data:
                    if extracted_data[key]:  # If we have data for this category, concatenate it
                        extracted_file_data[key] += f"Table {i+1}:\n{extracted_data[key]}\n\n"

        # Append the extracted file data to the combined list
        self.extracted_data_combined.append(extracted_file_data)

    def process_pdfs(self):
        """
        Process all PDFs in the folder, extract tables, and extract address-related data.
        """
        for filename in os.listdir(self.pdf_folder):
            if filename.endswith('.pdf'):
                pdf_path = os.path.join(self.pdf_folder, filename)
                tables = self.extract_tables_from_pdf(pdf_path)

                if not tables:
                    print(f"Skipping {filename} (no tables found).")
                    continue

                # Save tables to Excel and extract address-related data
                self.save_tables_to_excel(tables, filename)

    def save_combined_address_data(self):
        """
        Save all extracted address-related data into a single Excel file with separate columns for each category.
        """
        if self.extracted_data_combined:
            output_df = pd.DataFrame(self.extracted_data_combined)

            # Save the combined data to a single Excel file
            output_df.to_excel(self.output_excel, index=False)
            print(f"All address-related data saved to {self.output_excel}.")
        else:
            print("No address-related data found.")

    def run(self):
        """
        Main function to process PDFs and save the extracted data into a single Excel file with separate columns.
        """
        print("Processing PDFs...")
        self.process_pdfs()

        print("Saving combined address-related data...")
        self.save_combined_address_data()


# Usage
if __name__ == "__main__":
    pdf_folder = 'path_to_pdf_folder'
    excel_folder = 'path_to_excel_folder'
    output_excel = 'combined_address_data.xlsx'  # Single output file for all address-related data

    extractor = PDFTableExtractor(pdf_folder, excel_folder, output_excel)
    extractor.run()
