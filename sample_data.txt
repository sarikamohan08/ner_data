import pandas as pd
import re

# Function to split Coding/Def values
def split_coding_def(row, hospital_name):
    coding_def = row.get("Coding/Def", "")
    ms_drg = []
    rev_code = []
    cpt = []

    # Extract MS-DRG, Rev Code, and CPT values using regex
    if "AND RC" in coding_def:
        parts = coding_def.split("AND RC")
        ms_drg = parts[0].split(",") if parts[0] else []
        rev_code_cpt = parts[1].split("AND CPT") if "AND CPT" in parts[1] else [parts[1]]
        rev_code = rev_code_cpt[0].split(",") if rev_code_cpt[0] else []
        if len(rev_code_cpt) > 1:
            cpt = rev_code_cpt[1].split(",") if rev_code_cpt[1] else []
    
    # Create individual rows for each value
    rows = []
    for drg in ms_drg:
        rows.append({
            "Sheet Name": row["Sheet Name"],
            "Provider": hospital_name,
            "Service Description": row["Service Description"],
            "MS-DRG": drg.strip(),
            "Rev Code": "",
            "ICD9, ICD10": row["ICD9,ICD10"],
            "CPT": "",
            "Coding/Def": drg.strip(),
            "Amount Rate": row.get("Amount Rate", ""),
            "Amount": row.get("Amount", ""),
        })
    for rc in rev_code:
        rows.append({
            "Sheet Name": row["Sheet Name"],
            "Provider": hospital_name,
            "Service Description": row["Service Description"],
            "MS-DRG": "",
            "Rev Code": rc.strip(),
            "ICD9, ICD10": row["ICD9,ICD10"],
            "CPT": "",
            "Coding/Def": rc.strip(),
            "Amount Rate": row.get("Amount Rate", ""),
            "Amount": row.get("Amount", ""),
        })
    for code in cpt:
        rows.append({
            "Sheet Name": row["Sheet Name"],
            "Provider": hospital_name,
            "Service Description": row["Service Description"],
            "MS-DRG": "",
            "Rev Code": "",
            "ICD9, ICD10": row["ICD9,ICD10"],
            "CPT": code.strip(),
            "Coding/Def": code.strip(),
            "Amount Rate": row.get("Amount Rate", ""),
            "Amount": row.get("Amount", ""),
        })

    return rows

# Function to process each sheet in the Excel file
def process_sheet(sheet_name, df):
    # Extract hospital names dynamically
    hospital_columns = [col for col in df.columns if "hospital" in col.lower()]
    providers = df[hospital_columns].fillna("").to_dict("records")

    # Prepare the output DataFrame
    output_data = []
    for index, row in df.iterrows():
        for provider, rate in zip(hospital_columns, providers[index].values()):
            if rate.strip():  # If rate is available for this provider
                hospital_name = re.sub(r"\shospital$", "", provider, flags=re.IGNORECASE).strip()
                transformed_rows = split_coding_def(row, hospital_name)
                output_data.extend(transformed_rows)

    return output_data

# Main function to read the Excel and process all sheets
def transform_excel(file_path):
    excel_data = pd.ExcelFile(file_path)
    final_output = []

    for sheet_name in excel_data.sheet_names:
        df = excel_data.parse(sheet_name)
        df["Sheet Name"] = sheet_name  # Add sheet name column
        processed_data = process_sheet(sheet_name, df)
        final_output.extend(processed_data)

    # Convert the final output to a DataFrame and save to Excel
    output_df = pd.DataFrame(final_output)
    output_df.to_excel("transformed_output.xlsx", index=False)
    print("Data transformed and saved to 'transformed_output.xlsx'.")

# Run the function
transform_excel("input_excel_file.xlsx")
