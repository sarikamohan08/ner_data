import pandas as pd

class ExcelDataExtractor:
    def __init__(self, excel_path, service_address_keywords=None, notice_address_keywords=None):
        """
        Initialize with the path to the Excel file and optional address keywords.
        """
        self.excel_path = excel_path
        
        # Service and Notice address-related keywords
        self.service_address_keywords = service_address_keywords or ['service address', 'service location', 'delivery address']
        self.notice_address_keywords = notice_address_keywords or ['notice address', 'legal notice', 'notification address']

    def load_excel(self):
        """
        Load the Excel file into a dictionary of DataFrames (one for each sheet).
        """
        try:
            df = pd.read_excel(self.excel_path, sheet_name=None)  # Load all sheets
            return df
        except Exception as e:
            print(f"Error loading Excel file: {e}")
            return {}

    def extract_addresses(self, df, keywords):
        """
        Extract rows from a DataFrame that contain specific address-related keywords.
        """
        # Use str.contains to search for rows with the keywords in any column
        address_rows = df.apply(lambda row: row.astype(str).str.contains('|'.join(keywords), case=False, na=False).any(), axis=1)
        return df[address_rows]  # Return only rows where keywords were found

    def process_excel(self):
        """
        Process the Excel file, extracting relevant data.
        """
        all_data = []

        # Load the Excel data (dictionary of sheet names and DataFrames)
        sheets = self.load_excel()

        # Iterate through all sheets
        for sheet_name, df in sheets.items():
            # Initialize lists to store address-related data
            service_data = pd.DataFrame()
            notice_data = pd.DataFrame()
            
            # Extract rows that contain service address-related keywords
            service_data = self.extract_addresses(df, self.service_address_keywords)
            
            # Extract rows that contain notice address-related keywords
            notice_data = self.extract_addresses(df, self.notice_address_keywords)

            # Store extracted data in a structured dictionary
            data = {
                'sheet_name': sheet_name,
                'service_addresses': service_data.to_string(index=False) if not service_data.empty else '',
                'notice_addresses': notice_data.to_string(index=False) if not notice_data.empty else ''
            }
            all_data.append(data)

        # Convert all collected data to a DataFrame for easier viewing and analysis
        result_df = pd.DataFrame(all_data)
        return result_df

    def save_to_excel(self, result_df, output_path):
        """
        Save the result DataFrame to an Excel file.
        """
        try:
            result_df.to_excel(output_path, index=False)  # Save DataFrame to Excel without index
            print(f"Result successfully saved to {output_path}")
        except Exception as e:
            print(f"Error saving Excel file: {e}")

# Usage
if __name__ == "__main__":
    excel_path = 'path_to_single_excel_file.xlsx'  # Path to the Excel file you want to process
    output_path = 'extracted_addresses.xlsx'  # Path to save the result

    # Define specific address keywords
    service_address_keywords = ['service address', 'service location', 'delivery address']
    notice_address_keywords = ['notice address', 'legal notice', 'notification address']

    # Create an instance of the extractor
    extractor = ExcelDataExtractor(excel_path, service_address_keywords=service_address_keywords, notice_address_keywords=notice_address_keywords)

    # Process the Excel file and get the results in a DataFrame
    result_df = extractor.process_excel()

    # Save the result to a new Excel file
    extractor.save_to_excel(result_df, output_path)
