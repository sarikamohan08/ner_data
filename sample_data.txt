import pandas as pd
import re

class AddressExtractor:
    def __init__(self, excel_file):
        self.excel_file = excel_file
        self.data = self.read_excel_file()
    
    def read_excel_file(self):
        """
        Load the Excel file and return the content as a DataFrame.
        """
        try:
            df = pd.read_excel(self.excel_file)
            print(f"Successfully loaded {self.excel_file}")
            return df
        except Exception as e:
            print(f"An error occurred while loading the Excel file: {e}")
            return None

    def extract_addresses(self):
        """
        Extract service address, notice address, remit address, contract contact,
        and contract information from the DataFrame based on keywords.
        """
        keywords = {
            'service_address': r'service\s*address',
            'notice_address': r'(notice\s*address|address\s*for\s*notice)',
            'remit_address': r'remit\s*address',
            'contract_contact': r'contract\s*contact',
            'contract_information': r'(contract\s*information|contractor\s*information)'
        }

        extracted_data = {
            'filename': [],
            'service_address': [],
            'notice_address': [],
            'remit_address': [],
            'contract_contact': [],
            'contract_information': []
        }

        for index, row in self.data.iterrows():
            text_content = row['Content']  # Assuming the extracted text is in a column named 'Content'
            filename = row['Filename']  # Assuming each row has a Filename column

            # Initialize empty fields for each keyword
            service_address = ""
            notice_address = ""
            remit_address = ""
            contract_contact = ""
            contract_information = ""

            # Search for keywords in the content
            for key, pattern in keywords.items():
                match = re.search(pattern, text_content, re.IGNORECASE)
                if match:
                    # Extract the address or information by taking the surrounding text (e.g., the next few words after the keyword)
                    extracted_value = self.extract_after_match(text_content, match)
                    if key == 'service_address':
                        service_address = extracted_value
                    elif key == 'notice_address':
                        notice_address = extracted_value
                    elif key == 'remit_address':
                        remit_address = extracted_value
                    elif key == 'contract_contact':
                        contract_contact = extracted_value
                    elif key == 'contract_information':
                        contract_information = extracted_value

            # Append the extracted values to the respective lists
            extracted_data['filename'].append(filename)
            extracted_data['service_address'].append(service_address)
            extracted_data['notice_address'].append(notice_address)
            extracted_data['remit_address'].append(remit_address)
            extracted_data['contract_contact'].append(contract_contact)
            extracted_data['contract_information'].append(contract_information)

        # Convert the extracted data to a DataFrame and return
        extracted_df = pd.DataFrame(extracted_data)
        return extracted_df

    def extract_after_match(self, text, match, window=100):
        """
        Extract the text following the match keyword, within a window of characters.
        We can adjust the `window` parameter to control how many characters after
        the keyword should be captured.
        """
        start = match.end()  # Start extracting text after the match ends
        end = min(start + window, len(text))  # Extract up to the specified window or end of the text
        return text[start:end].strip()

# Example Usage:
# Assuming the Excel file has a "Content" column that contains the extracted text, and "Filename" column.
excel_file = 'extracted_data.xlsx'  # Path to the Excel file with extracted content
address_extractor = AddressExtractor(excel_file)

# Extract the addresses and information from the Excel file
extracted_df = address_extractor.extract_addresses()

# Show the extracted DataFrame
print(extracted_df)

# Optionally, save the extracted addresses to a new Excel or CSV file
extracted_df.to_excel('extracted_addresses.xlsx', index=False)
