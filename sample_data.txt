import os
import re
import pytesseract
import camelot
import pandas as pd
from openpyxl import load_workbook
from PyPDF2 import PdfReader

class PDFProcessor:
    def __init__(self, input_excel, base_dir, output_dir):
        self.input_excel = input_excel  # Excel file with tax IDs
        self.base_dir = base_dir  # Main folder containing subfolders
        self.output_dir = output_dir  # Output folder for results
        self.result_file = os.path.join(output_dir, "result.xlsx")  # Combined result file
        self.taxid_df = pd.read_excel(input_excel)  # Load the tax ID Excel file
        
        # Create output directory if it doesn't exist
        os.makedirs(output_dir, exist_ok=True)

    def process(self):
        for _, row in self.taxid_df.iterrows():
            taxid = row['TaxID']  # Assuming 'TaxID' column in Excel
            taxid_folder = os.path.join(self.base_dir, str(taxid))
            
            if os.path.exists(taxid_folder) and os.path.isdir(taxid_folder):
                self.process_taxid_folder(taxid, taxid_folder)
                
    def process_taxid_folder(self, taxid, folder):
        # Find all PDFs in the folder
        for filename in os.listdir(folder):
            if filename.endswith('.pdf'):
                pdf_path = os.path.join(folder, filename)
                self.process_pdf(taxid, pdf_path)

    def process_pdf(self, taxid, pdf_path):
        # Output subfolder for this taxid
        taxid_output_folder = os.path.join(self.output_dir, str(taxid))
        os.makedirs(taxid_output_folder, exist_ok=True)

        # Extract content using pytesseract
        text_output_path = os.path.join(taxid_output_folder, f"{os.path.basename(pdf_path)}.txt")
        self.extract_text_from_pdf(pdf_path, text_output_path)

        # Extract tables using Camelot
        table_output_path = os.path.join(taxid_output_folder, f"{os.path.basename(pdf_path)}.xlsx")
        self.extract_tables_from_pdf(pdf_path, table_output_path)

        # Extract title and date from both text and tables
        title, date = self.extract_title_and_date(text_output_path)
        self.append_to_result(taxid, os.path.basename(pdf_path), title, date, text_output_path, table_output_path)

    def extract_text_from_pdf(self, pdf_path, text_output_path):
        # Read PDF and extract text using PyTesseract and PyPDF2
        reader = PdfReader(pdf_path)
        full_text = ""
        for page_num in range(len(reader.pages)):
            page = reader.pages[page_num]
            text = page.extract_text()
            full_text += text

        # Write the extracted text to a .txt file
        with open(text_output_path, 'w') as f:
            f.write(full_text)

    def extract_tables_from_pdf(self, pdf_path, table_output_path):
        # Extract tables using Camelot
        tables = camelot.read_pdf(pdf_path, pages='all')
        if tables:
            tables.export(table_output_path, f='excel')

    def extract_title_and_date(self, text_file):
        # Extract title and date using regex
        with open(text_file, 'r') as f:
            text = f.read()

        # Example regex to extract title and date (this should be customized)
        title = re.search(r"(Title:\s*)([A-Za-z0-9\s]+)", text)
        date = re.search(r"(Date:\s*)(\d{2}/\d{2}/\d{4})", text)

        title = title.group(2) if title else "Unknown Title"
        date = date.group(2) if date else "Unknown Date"

        return title, date

    def append_to_result(self, taxid, filename, title, date, text_output_path, table_output_path):
        # Load or create result file
        if os.path.exists(self.result_file):
            writer = pd.ExcelWriter(self.result_file, engine='openpyxl', mode='a')
            book = load_workbook(self.result_file)
            writer.book = book
        else:
            writer = pd.ExcelWriter(self.result_file, engine='openpyxl')

        # Create dataframe to store the result
        df = pd.DataFrame({
            'TaxID': [taxid],
            'Filename': [filename],
            'Title': [title],
            'Date': [date],
            'Text File': [text_output_path],
            'Table File': [table_output_path]
        })

        # Append to result.xlsx
        df.to_excel(writer, sheet_name="Results", index=False, header=not os.path.exists(self.result_file))
        writer.save()

# Main execution
if __name__ == "__main__":
    input_excel = 'tax_ids.xlsx'  # Path to input Excel with TaxIDs
    base_dir = 'taxid_folders'  # Base directory with TaxID subfolders
    output_dir = 'output'  # Output folder for processed files

    processor = PDFProcessor(input_excel, base_dir, output_dir)
    processor.process()
