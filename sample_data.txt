import os
import pandas as pd
import pytesseract
import camelot
from pdf2image import convert_from_path

class PDFExtractor:
    def __init__(self, input_path, output_path):
        self.input_path = input_path
        self.output_path = output_path

    def read_excel(self, excel_file):
        """Read the subfolder list from an Excel file."""
        return pd.read_excel(excel_file)['Subfolder'].tolist()

    def extract_from_pdf(self, pdf_file, tax_id):
        """Extract text and tables from the specified PDF file."""
        # Ensure tax_id is a string
        tax_id = str(tax_id)
        print(f"Tax ID: '{tax_id}' (type: {type(tax_id)})")  # Debugging line

        # Create output folder for the Tax ID inside the main output path
        output_folder = os.path.join(self.output_path, tax_id)
        print(f"Output folder: '{output_folder}' (type: {type(output_folder)})")  # Debugging line
        os.makedirs(output_folder, exist_ok=True)

        # Extract text and tables
        self.extract_text(pdf_file, output_folder)
        self.extract_tables(pdf_file, output_folder)

    def extract_text(self, pdf_file, output_folder):
        """Extract text from PDF using pytesseract and save it as a text file."""
        # Convert PDF to images
        images = convert_from_path(pdf_file)
        text = ""
        for image in images:
            # Use pytesseract to extract text from the image
            text += pytesseract.image_to_string(image) + "\n"

        # Save text to file
        text_filename = os.path.join(output_folder, os.path.basename(pdf_file).replace('.pdf', '.txt'))
        print(f"Text filename: '{text_filename}' (type: {type(text_filename)})")  # Debugging line
        with open(text_filename, 'w', encoding='utf-8') as f:
            f.write(text)

    def extract_tables(self, pdf_file, output_folder):
        """Extract tables from PDF using Camelot and save them to Excel."""
        tables = camelot.read_pdf(pdf_file, pages='all')
        if tables:
            excel_filename = os.path.join(output_folder, os.path.basename(pdf_file).replace('.pdf', '.xlsx'))
            print(f"Excel filename: '{excel_filename}' (type: {type(excel_filename)})")  # Debugging line
            tables.export(excel_filename, f='excel')
        else:
            print(f"No tables found in {pdf_file}")

    def process_subfolders(self, excel_file):
        """Process each subfolder to extract PDFs based on Tax ID."""
        subfolders = self.read_excel(excel_file)
        for subfolder in subfolders:
            folder_path = os.path.join(self.input_path, subfolder)
            print(f"Processing folder: '{folder_path}' (type: {type(folder_path)})")  # Debugging line
            if os.path.exists(folder_path):
                for filename in os.listdir(folder_path):
                    if filename.endswith('.pdf'):
                        pdf_file_path = os.path.join(folder_path, filename)
                        print(f"Found PDF: '{pdf_file_path}' (type: {type(pdf_file_path)})")  # Debugging line
                        # Assuming the Tax ID is part of the filename (like "TaxID_filename.pdf")
                        tax_id = filename.split('_')[0]  # Extract Tax ID from filename
                        tax_id = str(tax_id)  # Ensure tax_id is a string
                        print(f"Extracted Tax ID: '{tax_id}' (type: {type(tax_id)})")  # Debugging line

                        print(f"Processing '{pdf_file_path}' for Tax ID: '{tax_id}'")
                        self.extract_from_pdf(pdf_file_path, tax_id)
            else:
                print(f"Subfolder '{folder_path}' does not exist.")

if __name__ == "__main__":
    input_path = r"C:\path\to\your\subfolders"  # Path to the folder containing subfolders
    output_path = r"C:\path\to\your\output\extraction"  # Main output path for extracted content
    excel_file = r"C:\path\to\your\subfolders.xlsx"  # Excel file containing the subfolder list

    # Ensure Tesseract is configured correctly
    pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'  # Adjust path if necessary

    extractor = PDFExtractor(input_path, output_path)
    extractor.process_subfolders(excel_file)
