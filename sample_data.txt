import pandas as pd
import openai
import json

# === CONFIG ===
file_path = "your_excel_file.xlsx"           # Input Excel file
output_file = "structured_output.xlsx"       # Output Excel file
openai.api_key = "your-api-key-here"         # Your OpenAI API key

# === STEP 1: Load messy Excel ===
df_raw = pd.read_excel(file_path, header=None)

# Find where data starts (row beginning with "1")
start_row = df_raw[df_raw[0] == 1].index[0]
header_row = df_raw.iloc[start_row - 1].fillna('').tolist()

# Assign proper headers and get data rows
df = df_raw.iloc[start_row:].reset_index(drop=True)
df.columns = header_row

# === STEP 2: Detect dynamic provider columns (after 'coding/def') ===
columns_list = df.columns.tolist()
try:
    coding_index = columns_list.index('coding/def')
except ValueError:
    raise ValueError("'coding/def' column not found in the sheet.")

provider_cols = columns_list[coding_index + 1:]
print("Detected providers:", provider_cols)

# === STEP 3: Build structured lines to send to GPT ===
lines_for_gpt = []

for _, row in df.iterrows():
    service = str(row.get('Service description', '')).strip()
    coding = str(row.get('coding/def', '')).strip()

    if not service and not coding:
        continue  # skip empty rows

    provider_values = []
    for provider in provider_cols:
        value = str(row.get(provider, '')).strip()
        if value:
            provider_values.append(f"{provider}: {value}")

    line = f"Service: {service} | Coding: {coding} | " + " | ".join(provider_values)
    lines_for_gpt.append(line)

# Join all rows into one text blob for GPT
data_text = "\n".join(lines_for_gpt)

# === STEP 4: GPT-4o prompt for structured extraction ===
prompt = f"""
Extract structured rows from the following service data.

Return it as a JSON list, where each item contains:
- service_description
- coding_def (split if there's an 'AND')
- provider (e.g. hospital name)
- value (like 29% or $115,656)

Here is the raw data:

{data_text}
"""

# === STEP 5: Send to OpenAI GPT-4o ===
response = openai.ChatCompletion.create(
    model="gpt-4o",
    messages=[
        {"role": "user", "content": prompt}
    ],
    temperature=0.2,
    max_tokens=1800
)

# === STEP 6: Extract JSON from GPT response ===
raw_output = response['choices'][0]['message']['content']

# Extract only the JSON portion (safe parse)
start = raw_output.find("[")
end = raw_output.rfind("]") + 1
json_text = raw_output[start:end]

# Load into DataFrame
structured_df = pd.DataFrame(json.loads(json_text))

# === STEP 7: Save to NEW Excel file ===
with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
    structured_df.to_excel(writer, sheet_name="structured_output", index=False)

print(f"âœ… Done! Structured data saved to: {output_file}")
